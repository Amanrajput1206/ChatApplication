{"ast":null,"code":"var _jsxFileName = \"C:\\\\D-Drive\\\\Intellij\\\\Projects\\\\JavaWebSocketReact\\\\react-client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Input from \"@mui/material/Input\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport { TextField, IconButton, List, ListItem, ListItemText, ListItemAvatar, Avatar, InputAdornment, Typography } from \"@material-ui/core\";\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [stompClient, setStompClient] = useState(null);\n  useEffect(() => {\n    const socket = new SockJS(\"http://localhost:3000/ws\");\n    const client = Stomp.over(socket);\n    client.connect({}, () => {\n      client.subscribe(\"/topic/messages\", message => {\n        const receivedMessage = JSON.parse(message.body);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n      });\n    });\n    setStompClient(client);\n    return () => {\n      client.disconnect();\n    };\n  }, []);\n\n  const handleNicknameChange = event => {\n    setNickname(event.target.value);\n  };\n\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n\n  const sendMessage = () => {\n    if (message.trim()) {\n      const chatMessage = {\n        nickname,\n        content: message\n      };\n      stompClient.send(\"/app/chat\", {}, JSON.stringify(chatMessage));\n      setMessage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            children: msg.nickname.charAt(0)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: msg.nickname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this),\n          secondary: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        hiddenLabel: true,\n        id: \"filled-hidden-label-small\",\n        placeholder: \"Enter you nickname\",\n        size: \"small\",\n        value: nickname,\n        onChange: handleNicknameChange,\n        InputProps: {\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(AccountCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)\n        },\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        placeholder: \"Type a message\",\n        value: message,\n        onChange: handleMessageChange,\n        onKeyDown: event => {\n          if (event.key === \"Enter\") {\n            sendMessage();\n          }\n        },\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: sendMessage,\n        disabled: !message.trim(),\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"kfIWh3dVClcN4WhPtpWhCUclro0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/D-Drive/Intellij/Projects/JavaWebSocketReact/react-client/src/App.js"],"names":["React","useState","useEffect","Box","Input","InputLabel","FormControl","AccountCircle","TextField","IconButton","List","ListItem","ListItemText","ListItemAvatar","Avatar","InputAdornment","Typography","Stomp","SockJS","App","messages","setMessages","message","setMessage","nickname","setNickname","stompClient","setStompClient","socket","client","over","connect","subscribe","receivedMessage","JSON","parse","body","prevMessages","disconnect","handleNicknameChange","event","target","value","handleMessageChange","sendMessage","trim","chatMessage","content","send","stringify","map","msg","index","charAt","display","alignItems","startAdornment","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Input from \"@mui/material/Input\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\r\nimport {\r\n  TextField,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  InputAdornment,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Stomp from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\n\r\nconst App = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [nickname, setNickname] = useState(\"\");\r\n  const [stompClient, setStompClient] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS(\"http://localhost:3000/ws\");\r\n    const client = Stomp.over(socket);\r\n\r\n    client.connect({}, () => {\r\n      client.subscribe(\"/topic/messages\", (message) => {\r\n        const receivedMessage = JSON.parse(message.body);\r\n        setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n      });\r\n    });\r\n\r\n    setStompClient(client);\r\n\r\n    return () => {\r\n      client.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const handleNicknameChange = (event) => {\r\n    setNickname(event.target.value);\r\n  };\r\n\r\n  const handleMessageChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    if (message.trim()) {\r\n      const chatMessage = {\r\n        nickname,\r\n        content: message,\r\n      };\r\n\r\n      stompClient.send(\"/app/chat\", {}, JSON.stringify(chatMessage));\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <List>\r\n        {messages.map((msg, index) => (\r\n          <ListItem key={index}>\r\n            <ListItemAvatar>\r\n              <Avatar>{msg.nickname.charAt(0)}</Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n              primary={\r\n                <Typography variant=\"subtitle1\">{msg.nickname}</Typography>\r\n              }\r\n              secondary={msg.content}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <TextField\r\n          hiddenLabel\r\n          id=\"filled-hidden-label-small\"\r\n          placeholder=\"Enter you nickname\"\r\n          size=\"small\"\r\n          value={nickname}\r\n          onChange={handleNicknameChange}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <AccountCircle />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          autoFocus\r\n        />\r\n        <TextField\r\n          placeholder=\"Type a message\"\r\n          value={message}\r\n          onChange={handleMessageChange}\r\n          onKeyDown={(event) => {\r\n            if (event.key === \"Enter\") {\r\n              sendMessage();\r\n            }\r\n          }}\r\n          fullWidth\r\n        />\r\n        <IconButton onClick={sendMessage} disabled={!message.trim()}>\r\n          send\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}