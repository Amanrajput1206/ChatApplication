{"ast":null,"code":"import createPalette from \"./createPalette.js\";\nimport createThemeWithVars from \"./createThemeWithVars.js\";\nimport createThemeNoVars from \"./createThemeNoVars.js\";\nexport { createMuiTheme } from \"./createThemeNoVars.js\"; // eslint-disable-next-line consistent-return\n\nfunction attachColorScheme(theme, scheme, colorScheme) {\n  if (!theme.colorSchemes) {\n    return undefined;\n  }\n\n  if (colorScheme) {\n    theme.colorSchemes[scheme] = { ...(colorScheme !== true && colorScheme),\n      palette: createPalette({ ...(colorScheme === true ? {} : colorScheme),\n        mode: scheme\n      }) // cast type to skip module augmentation test\n\n    };\n  }\n}\n/**\n * Generate a theme base on the options received.\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @param args Deep merge the arguments with the about to be returned theme.\n * @returns A complete, ready-to-use theme object.\n */\n\n\nexport default function createTheme() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    palette,\n    cssVariables = false,\n    colorSchemes: initialColorSchemes = !palette ? {\n      light: true\n    } : undefined,\n    defaultColorScheme: initialDefaultColorScheme = palette?.mode,\n    ...rest\n  } = options;\n  const defaultColorSchemeInput = initialDefaultColorScheme || 'light';\n  const defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];\n  const colorSchemesInput = { ...initialColorSchemes,\n    ...(palette ? {\n      [defaultColorSchemeInput]: { ...(typeof defaultScheme !== 'boolean' && defaultScheme),\n        palette\n      }\n    } : undefined)\n  };\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (cssVariables === false) {\n    const theme = createThemeNoVars(options, ...args);\n\n    if (!('colorSchemes' in options)) {\n      return theme;\n    }\n\n    theme.defaultColorScheme = defaultColorSchemeInput;\n    theme.colorSchemes = colorSchemesInput;\n\n    if (theme.palette.mode === 'light') {\n      theme.colorSchemes.light = {\n        palette: theme.palette\n      };\n      attachColorScheme(theme, 'dark', colorSchemesInput.dark);\n    }\n\n    if (theme.palette.mode === 'dark') {\n      theme.colorSchemes.dark = {\n        palette: theme.palette\n      };\n      attachColorScheme(theme, 'light', colorSchemesInput.light);\n    }\n\n    return theme;\n  }\n\n  if (!palette && !('light' in colorSchemesInput) && defaultColorSchemeInput === 'light') {\n    colorSchemesInput.light = true;\n  }\n\n  return createThemeWithVars({ ...rest,\n    colorSchemes: colorSchemesInput,\n    defaultColorScheme: defaultColorSchemeInput,\n    ...(typeof cssVariables !== 'boolean' && cssVariables)\n  }, ...args);\n}","map":{"version":3,"sources":["C:/D-Drive/Intellij/Projects/JavaWebSocketReact/react-client/node_modules/@mui/material/styles/createTheme.js"],"names":["createPalette","createThemeWithVars","createThemeNoVars","createMuiTheme","attachColorScheme","theme","scheme","colorScheme","colorSchemes","undefined","palette","mode","createTheme","options","cssVariables","initialColorSchemes","light","defaultColorScheme","initialDefaultColorScheme","rest","defaultColorSchemeInput","defaultScheme","colorSchemesInput","args","dark"],"mappings":"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","sourcesContent":["import createPalette from \"./createPalette.js\";\nimport createThemeWithVars from \"./createThemeWithVars.js\";\nimport createThemeNoVars from \"./createThemeNoVars.js\";\nexport { createMuiTheme } from \"./createThemeNoVars.js\";\n// eslint-disable-next-line consistent-return\nfunction attachColorScheme(theme, scheme, colorScheme) {\n  if (!theme.colorSchemes) {\n    return undefined;\n  }\n  if (colorScheme) {\n    theme.colorSchemes[scheme] = {\n      ...(colorScheme !== true && colorScheme),\n      palette: createPalette({\n        ...(colorScheme === true ? {} : colorScheme),\n        mode: scheme\n      }) // cast type to skip module augmentation test\n    };\n  }\n}\n\n/**\n * Generate a theme base on the options received.\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @param args Deep merge the arguments with the about to be returned theme.\n * @returns A complete, ready-to-use theme object.\n */\nexport default function createTheme(options = {},\n// cast type to skip module augmentation test\n...args) {\n  const {\n    palette,\n    cssVariables = false,\n    colorSchemes: initialColorSchemes = !palette ? {\n      light: true\n    } : undefined,\n    defaultColorScheme: initialDefaultColorScheme = palette?.mode,\n    ...rest\n  } = options;\n  const defaultColorSchemeInput = initialDefaultColorScheme || 'light';\n  const defaultScheme = initialColorSchemes?.[defaultColorSchemeInput];\n  const colorSchemesInput = {\n    ...initialColorSchemes,\n    ...(palette ? {\n      [defaultColorSchemeInput]: {\n        ...(typeof defaultScheme !== 'boolean' && defaultScheme),\n        palette\n      }\n    } : undefined)\n  };\n  if (cssVariables === false) {\n    const theme = createThemeNoVars(options, ...args);\n    if (!('colorSchemes' in options)) {\n      return theme;\n    }\n    theme.defaultColorScheme = defaultColorSchemeInput;\n    theme.colorSchemes = colorSchemesInput;\n    if (theme.palette.mode === 'light') {\n      theme.colorSchemes.light = {\n        palette: theme.palette\n      };\n      attachColorScheme(theme, 'dark', colorSchemesInput.dark);\n    }\n    if (theme.palette.mode === 'dark') {\n      theme.colorSchemes.dark = {\n        palette: theme.palette\n      };\n      attachColorScheme(theme, 'light', colorSchemesInput.light);\n    }\n    return theme;\n  }\n  if (!palette && !('light' in colorSchemesInput) && defaultColorSchemeInput === 'light') {\n    colorSchemesInput.light = true;\n  }\n  return createThemeWithVars({\n    ...rest,\n    colorSchemes: colorSchemesInput,\n    defaultColorScheme: defaultColorSchemeInput,\n    ...(typeof cssVariables !== 'boolean' && cssVariables)\n  }, ...args);\n}"]},"metadata":{},"sourceType":"module"}